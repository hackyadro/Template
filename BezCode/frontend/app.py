import datetime
import streamlit as st
import json
import time
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from streamlit_autorefresh import st_autorefresh
import paho.mqtt.client as mqtt
import threading
import os

st.set_page_config(
    page_title="Indoor Navigation",
    page_icon="^_~",
    layout="wide"
)

class MQTTWebSocketClient:
    def __init__(self):
        self.client = mqtt.Client(client_id="FrontendWS", transport="websockets")
        self.current_position = {"x": 2.5, "y": 2.5}
        self.detected_beacons = [] 
        self.positioning_beacons = []  
        self.positions_history = []
        self.connected = False
        self.beacon_config = {}
        self.route_file_path = None
        self.route_file_content = None
        
    def publish_beacon_config(self, beacons_dict):
        try:
            beacon_data = {
                "beacons": beacons_dict,
                "timestamp": time.time(),
                "type": "full_config"
            }
            self.client.publish("beacons/management/setConf", json.dumps(beacon_data))
            print(f"‚úÖ Beacon configuration published with {len(beacons_dict)} beacons")
            return True
        except Exception as e:
            print(f"Failed to publish beacon configuration: {e}")
            return False

    def start_route_recording(self):
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            self.route_file_path = f"/app/data/route_{timestamp}.path"
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(os.path.dirname(self.route_file_path), exist_ok=True)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            with open(self.route_file_path, 'w') as f:
                f.write("X;Y\n")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            self.route_file_content = "X;Y\n"
            
            print(f"üöÄ Started recording route to: {self.route_file_path}")
            return True
        except Exception as e:
            print(f"Error starting route recording: {e}")
            return False
        
    def stop_route_recording(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å –º–∞—Ä—à—Ä—É—Ç–∞"""
        try:
            if self.route_file_path and os.path.exists(self.route_file_path):
                # –ß–∏—Ç–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                with open(self.route_file_path, 'r') as f:
                    self.route_file_content = f.read()
                
                print(f"üõë Stopped recording route. File: {self.route_file_path}")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                lines = self.route_file_content.strip().split('\n')
                point_count = len(lines) - 1  # minus header
                print(f"üìä Recorded {point_count} points")
                return True
            return False
        except Exception as e:
            print(f"Error stopping route recording: {e}")
            return False
    
    def save_position_to_file(self, x, y):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –≤ —Ñ–∞–π–ª –º–∞—Ä—à—Ä—É—Ç–∞"""
        if self.route_file_path:
            try:
                # –ó–∞–º–µ–Ω—è–µ–º —Ç–æ—á–∫–∏ –Ω–∞ –∑–∞–ø—è—Ç—ã–µ –¥–ª—è –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
                x_str = f"{x:.1f}".replace('.', ',')
                y_str = f"{y:.1f}".replace('.', ',')
                
                line = f"{x_str};{y_str}\n"
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
                with open(self.route_file_path, 'a') as f:
                    f.write(line)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                if self.route_file_content is not None:
                    self.route_file_content += line
                
                return True
            except Exception as e:
                print(f"Error saving position to file: {e}")
                return False
        return False
        
    def on_connect(self, client, userdata, flags, rc):
        self.connected = True
        st.success("Connected to MQTT via WebSocket")
        client.subscribe("navigation/position/current")
        client.subscribe("ble/beacons/raw")
        
    def on_message(self, client, userdata, msg):
        try:
            payload = json.loads(msg.payload.decode())
            
            if msg.topic == "navigation/position/current":
                new_x = payload['x']
                new_y = payload['y']
                
                self.current_position = {
                    "x": new_x,
                    "y": new_y,
                    "timestamp": payload.get('timestamp', time.time())
                }
                self.positioning_beacons = payload.get('used_beacons', [])
                
                self.positions_history.append({
                    'x': self.current_position['x'],
                    'y': self.current_position['y'],
                    'timestamp': self.current_position['timestamp']
                })

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –º–∞—Ä—à—Ä—É—Ç–∞ –∞–∫—Ç–∏–≤–Ω–∞
                if st.session_state.get('route_started', False):
                    self.save_position_to_file(new_x, new_y)
                
                if len(self.positions_history) > 50:
                    self.positions_history.pop(0)
                    
            elif msg.topic == "ble/beacons/raw":
                self.detected_beacons = payload.get('beacons', [])
                
        except json.JSONDecodeError as e:
            st.error(f"JSON decode error: {e}")
            
    def start(self):
        try:
            self.client.on_connect = self.on_connect
            self.client.on_message = self.on_message
            self.client.connect("mqtt-broker", 9001, 60)
            threading.Thread(target=self.client.loop_forever, daemon=True).start()
        except Exception as e:
            st.error(f"WebSocket connection error: {e}")

def create_navigation_map(current_pos, beacon_config, positioning_beacons, history):
    # –°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –º–∞—è–∫–æ–≤
    fig = go.Figure()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã
    if beacon_config:
        x_coords = [beacon['x'] for beacon in beacon_config.values()]
        y_coords = [beacon['y'] for beacon in beacon_config.values()]
        x_min, x_max = min(x_coords) - 1, max(x_coords) + 1
        y_min, y_max = min(y_coords) - 1, max(y_coords) + 1
    else:
        x_min, x_max, y_min, y_max = -1, 6, -1, 6
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É –ø–æ–º–µ—â–µ–Ω–∏—è
    fig.add_shape(
        type="rect", 
        x0=x_min, y0=y_min, x1=x_max, y1=y_max, 
        line=dict(color="black", width=2), 
        fillcolor="lightgray", 
        opacity=0.1
    )
    
    # 1. –í–°–ï –º–∞—è–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (—Å–µ—Ä—ã–µ)
    if beacon_config:
        beacon_list = list(beacon_config.values())
        fig.add_trace(go.Scatter(
            x=[b["x"] for b in beacon_list],
            y=[b["y"] for b in beacon_list],
            mode='markers+text',
            name='Available Beacons',
            marker=dict(
                size=12, 
                color='lightgray', 
                symbol='square',
                line=dict(width=1, color='darkgray')
            ),
            text=[b["name"] for b in beacon_list],
            textposition="top center",
            hovertemplate="<b>%{text}</b><br>Position: (%{x}, %{y})<extra></extra>"
        ))
    
    # 2. –ú–∞—è–∫–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–∫—Ä–∞—Å–Ω—ã–µ)
    if positioning_beacons:
        # –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—è–∫–æ–≤ –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        enriched_positioning_beacons = []
        for beacon in positioning_beacons:
            beacon_name = beacon.get('name')
            if beacon_name in beacon_config:
                config_data = beacon_config[beacon_name]
                enriched_beacon = {
                    'x': config_data['x'],
                    'y': config_data['y'],
                    'name': beacon_name,
                    'distance': beacon.get('distance', 0),
                    'rssi': beacon.get('rssi', 'N/A')
                }
                enriched_positioning_beacons.append(enriched_beacon)
        
        if enriched_positioning_beacons:
            fig.add_trace(go.Scatter(
                x=[b["x"] for b in enriched_positioning_beacons],
                y=[b["y"] for b in enriched_positioning_beacons],
                mode='markers+text',
                name='Positioning Beacons',
                marker=dict(
                    size=20, 
                    color='rgba(255, 0, 0, 0.3)',
                    symbol='square',
                    line=dict(width=3, color='red')
                ),
                text=[f"{b['name']}<br>Dist: {b['distance']:.1f}m" for b in enriched_positioning_beacons],
                textposition="top center",
                hovertemplate="<b>%{text}</b><br>Position: (%{x}, %{y})<br>RSSI: %{customdata}<extra></extra>",
                customdata=[b['rssi'] for b in enriched_positioning_beacons]
            ))
    
    # 3. –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π
    if history:
        history_df = pd.DataFrame(history)
        fig.add_trace(go.Scatter(
            x=history_df['x'],
            y=history_df['y'],
            mode='lines+markers',
            name='Movement Path',
            line=dict(color='blue', width=3),
            marker=dict(size=6, color='blue'),
            hoverinfo='skip'
        ))
    
    # 4. –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è
    fig.add_trace(go.Scatter(
        x=[current_pos['x']],
        y=[current_pos['y']],
        mode='markers+text',
        name='Current Position',
        marker=dict(
            size=20, 
            color='green', 
            symbol='circle',
            line=dict(width=3, color='darkgreen')
        ),
        text=['YOU ARE HERE'],
        textposition="bottom center",
        hovertemplate="<b>Current Position</b><br>(%{x:.2f}, %{y:.2f})<extra></extra>"
    ))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä—Ç—ã
    fig.update_layout(
        xaxis_title="X Position (meters)",
        yaxis_title="Y Position (meters)",
        showlegend=True,
        height=700,
        xaxis=dict(
            range=[x_min, x_max], 
            gridcolor='lightgray', 
            dtick=1,
            scaleanchor="y",
            scaleratio=1
        ),
        yaxis=dict(
            range=[y_min, y_max], 
            gridcolor='lightgray', 
            dtick=1
        ),
        plot_bgcolor='white'
    )
    
    return fig

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ MQTT
    if 'mqtt_client' not in st.session_state:
        st.session_state.mqtt_client = MQTTWebSocketClient()
        st.session_state.mqtt_client.start()
    
    client = st.session_state.mqtt_client

    if 'route_started' not in st.session_state:
        st.session_state.route_started = False
        
    if 'show_download' not in st.session_state:
        st.session_state.show_download = False

    with st.sidebar:
        refresh_rate = st.sidebar.slider(
            "–ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ì—Ü)",
            min_value=0.1,
            max_value=10.0,
            value=2.0,
            step=0.1,
            help="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"
        )
        
        # –ü–æ–ª–∑—É–Ω–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã
        refresh_interval = int(1000 / refresh_rate) 
        
        # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –∞–∫—Ç–∏–≤–µ–Ω
        if st.session_state.route_started:
            st_autorefresh(interval=refresh_interval, key="data_refresh")
        else:
            # –ï—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–µ–Ω—å —Ä–µ–¥–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–ª—é—á–∞–µ–º
            st_autorefresh(interval=30000, key="data_refresh_slow")  # 30 —Å–µ–∫—É–Ω–¥
        
        st.sidebar.write(f"**–¢–µ–∫—É—â–∞—è —á–∞—Å—Ç–æ—Ç–∞:** {refresh_rate} –ì—Ü")
        st.sidebar.write(f"**–ò–Ω—Ç–µ—Ä–≤–∞–ª:** {refresh_interval} –º—Å")
        st.header("Beacon Configuration")
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        uploaded_file = st.file_uploader(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ standart.beacons",
            type=['beacons'],
            key="beacon_uploader",
            help="–§–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ: Name;X;Y"
        )
        
        if uploaded_file is not None:
            try:
                lines = uploaded_file.getvalue().decode('utf-8').splitlines()
                beacons_dict = {}
                
                for line in lines[1:]:
                    if line.strip():
                        name, x, y = line.strip().split(';')
                        beacons_dict[name] = {
                            'x': float(x),
                            'y': float(y),
                            'name': name
                        }
                
                if beacons_dict:
                    if st.button("–î–æ–±–∞–≤–∏—Ç—å –º–∞—è–∫–∏", use_container_width=True):
                        if client.publish_beacon_config(beacons_dict):
                            st.success("–ú–∞—è–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É")
                            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                            client.beacon_config.update(beacons_dict)
                        else:
                            st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—è–∫–æ–≤")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    with st.expander("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–∞—è–∫–æ–≤"):
                        preview_data = []
                        for name, beacon in list(beacons_dict.items())[:10]:
                            preview_data.append({"Name": name, "X": beacon['x'], "Y": beacon['y']})
                        if preview_data:
                            st.dataframe(preview_data)
                        if len(beacons_dict) > 10:
                            st.write(f"... –∏ –µ—â–µ {len(beacons_dict) - 10} –º–∞—è–∫–æ–≤")
                                    
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
                st.info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É:\nName;X;Y\nbeacon_1;3.0;-2.4")

        if client.beacon_config:
            if st.button("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", type="secondary"):
                client.beacon_config = {}
                st.success("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—á–∏—â–µ–Ω–∞")

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç"
        st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–º")
        
        beacons_loaded = len(client.beacon_config) > 0
        if beacons_loaded:
            st.success(f"–ì–æ—Ç–æ–≤–æ! –ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–∞—è–∫–æ–≤: {len(client.beacon_config)}")
        
        if st.button(
            "–ù–∞—á–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç",
            type="primary",
            disabled=not beacons_loaded,
            help="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–∞—è–∫–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏" if not beacons_loaded else "–ù–∞—á–∞—Ç—å –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞"
        ):
            start_command = {"command": "start_routing", "hz": refresh_rate}
            client.client.publish("navigation/route/control", json.dumps(start_command))
            
            if client.start_route_recording():
                st.session_state.route_started = True
                st.session_state.show_download = False
                st.success("–£—Å–ø–µ—à–Ω–æ! –ù–∞—á–∞—Ç–∞ –∑–∞–ø–∏—Å—å –º–∞—Ä—à—Ä—É—Ç–∞ –≤ —Ñ–∞–π–ª.")
            else:
                st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–ø–∏—Å–∏ –º–∞—Ä—à—Ä—É—Ç–∞")

    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    col1, col2 = st.columns([2, 1])
    
    with col1:
        fig = create_navigation_map(
            client.current_position, 
            client.beacon_config,
            client.positioning_beacons,
            client.positions_history
        )
        st.plotly_chart(fig, use_container_width=True)
        
        if st.session_state.route_started:
            st.markdown("---")
            col_end1, col_end2, col_end3 = st.columns([1, 2, 1])
            with col_end2:
                if st.button(
                    "üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç",
                    type="secondary",
                    use_container_width=True,
                    help="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç –∏ —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é"
                ):
                    end_command = {"command": "end_routing", "hz": refresh_rate}
                    client.client.publish("navigation/route/control", json.dumps(end_command))
                    
                    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
                    if client.stop_route_recording():
                        st.session_state.route_started = False
                        st.session_state.show_download = True
                        st.success("–ú–∞—Ä—à—Ä—É—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –§–∞–π–ª –≥–æ—Ç–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
                        if client.route_file_content:
                            lines = client.route_file_content.strip().split('\n')
                            point_count = len(lines) - 1
                            st.info(f"–ó–∞–ø–∏—Å–∞–Ω–æ —Ç–æ—á–µ–∫: {point_count}")
                    
                    # –£–±–∏—Ä–∞–µ–º st.rerun() —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            
            st.info("–ú–∞—Ä—à—Ä—É—Ç –∞–∫—Ç–∏–≤–µ–Ω - –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª –∏–¥–µ—Ç")
        else:
            st.info("–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ (–≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è route_started)
        if st.session_state.get('show_download', False) and client.route_file_content:
            st.markdown("---")
            st.subheader("–°–∫–∞—á–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            download_filename = f"–º–∞—Ä—à—Ä—É—Ç_{datetime.datetime.now().strftime('%Y-%m-%d_%H-%M')}.path"
            
            # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            st.download_button(
                label="‚¨á–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –º–∞—Ä—à—Ä—É—Ç–∞ (.path)",
                data=client.route_file_content,
                file_name=download_filename,
                mime="text/plain",
                use_container_width=True,
                help="–°–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞"
            )
            
            # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            with st.expander("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞"):
                st.code(client.route_file_content, language="text")
    
    
    with col2:
        st.metric(
            label="Current Position", 
            value=f"({client.current_position['x']:.2f}, {client.current_position['y']:.2f})"
        )

        status_color = "üü¢" if client.connected else "üî¥"
        st.write(f"{status_color} MQTT WebSocket: {'–ü–æ–¥–∫–ª—é—á–µ–Ω' if client.connected else '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫'}")

        st.subheader("–ú–∞—è–∫–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏")
        if client.positioning_beacons:
            for beacon in client.positioning_beacons:
                beacon_name = beacon.get('name', 'Unknown')
                with st.expander(f"–û–ø–∞ {beacon_name}"):
                    st.write(f"**RSSI:** {beacon.get('rssi', 'N/A')} dBm")
                    st.write(f"**Distance:** {beacon.get('distance', 'N/A'):.2f}m")
                    if beacon_name in client.beacon_config:
                        pos = client.beacon_config[beacon_name]
                        st.write(f"**Position:** ({pos['x']}, {pos['y']})")
        else:
            st.info("–î–∞–Ω–Ω—ã–µ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞")
        
        st.subheader("–í—Å–µ –º–∞—è–∫–∏")
        if client.beacon_config:
            for name, beacon in list(client.beacon_config.items())[:8]:
                st.write(f"{name} - ({beacon['x']}, {beacon['y']})")
            if len(client.beacon_config) > 8:
                st.write(f"... –∏ –µ—â–µ {len(client.beacon_config) - 8}")
        else:
            st.warning("–ú–∞—è–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        st.subheader("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∑–∏—Ü–∏–π")
        if client.positions_history:
            history_df = pd.DataFrame(client.positions_history[-8:])
            st.dataframe(
                history_df[['x', 'y', 'timestamp']].tail(5), 
                use_container_width=True,
                hide_index=True
            )
        else:
            st.info("–î–∞–Ω–Ω—ã–µ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞")
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞
        if st.session_state.route_started:
            st.subheader("–ó–∞–ø–∏—Å—å –º–∞—Ä—à—Ä—É—Ç–∞")
            st.success("–ê–∫—Ç–∏–≤–Ω–∞")
            if client.positions_history:
                latest_pos = client.positions_history[-1]
                st.write(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: ({latest_pos['x']:.1f}, {latest_pos['y']:.1f})")
            

if __name__ == "__main__":
    main()